"use strict";(self.webpackChunkapache_streampark_website=self.webpackChunkapache_streampark_website||[]).push([[8477],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(7294),n=r(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,i),hidden:r},t)}},5488:(e,t,r)=>{r.d(t,{Z:()=>d});var a=r(7462),n=r(7294),o=r(6010),i=r(2389),s=r(7392),c=r(7094),l=r(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:r,defaultValue:i,values:m,groupId:d,className:f}=e,h=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??h.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),v=(0,s.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,c.U)(),[w,C]=(0,n.useState)(g),D=[],{blockElementScrollPositionUntilNextRender:S}=(0,l.o5)();if(null!=d){const e=k[d];null!=e&&e!==w&&b.some((t=>t.value===e))&&C(e)}const O=e=>{const t=e.currentTarget,r=D.indexOf(t),a=b[r].value;a!==w&&(S(t),C(a),null!=d&&y(d,String(a)))},E=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const r=D.indexOf(e.currentTarget)+1;t=D[r]??D[0];break}case"ArrowLeft":{const r=D.indexOf(e.currentTarget)-1;t=D[r]??D[D.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,o.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},f)},b.map((e=>{let{value:t,label:r,attributes:i}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>D.push(e),onKeyDown:E,onClick:O},i,{className:(0,o.Z)("tabs__item",u,i?.className,{"tabs__item--active":w===t})}),r??t)}))),t?(0,n.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,i.Z)();return n.createElement(m,(0,a.Z)({key:String(t)},e))}},8844:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905)),o=r(5488),i=r(5162);const s={id:"Doris-Connector",title:"Apache Doris Connector",original:!0,sidebar_position:4},c=void 0,l={unversionedId:"connector/Doris-Connector",id:"connector/Doris-Connector",title:"Apache Doris Connector",description:"Apache Doris Connector",source:"@site/docs/connector/4-doris.md",sourceDirName:"connector",slug:"/connector/Doris-Connector",permalink:"/docs/connector/Doris-Connector",draft:!1,editUrl:"https://github.com/apache/incubator-streampark-website/edit/dev/docs/connector/4-doris.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"Doris-Connector",title:"Apache Doris Connector",original:!0,sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"ClickHouse Connector",permalink:"/docs/connector/Clickhouse-Connector"},next:{title:"Elasticsearch Connector",permalink:"/docs/connector/Elasticsearch-Connector"}},p={},u=[{value:"Apache Doris Connector",id:"apache-doris-connector",level:2},{value:"Write with StreamPark",id:"write-with-streampark",level:3},{value:"configuration list",id:"configuration-list",level:4},{value:"write data to Doris",id:"write-data-to-doris",level:4}],m={toc:u};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"apache-doris-connector"},"Apache Doris Connector"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://doris.apache.org/"},"Apache Doris")," is a high-performance, and real-time analytical database,\nwhich could support high-concurrent point query scenarios.\nStreamPark encapsulates DoirsSink for writing data to Doris in real-time, based on  ",(0,n.kt)("a",{parentName:"p",href:"https://doris.apache.org/administrator-guide/load-data/stream-load-manual.html"},"Doris' stream loads")),(0,n.kt)("h3",{id:"write-with-streampark"},"Write with StreamPark"),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamPark")," to write data to ",(0,n.kt)("inlineCode",{parentName:"p"},"Doris"),'.  DorisSink only supports JSON format (single-layer) writing currently,\nsuch as: {"id":1,"name":"streampark"} The example of the running program is java, as follows:'),(0,n.kt)("h4",{id:"configuration-list"},"configuration list"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"doris.sink:\n  fenodes:  127.0.0.1:8030    //doris fe http url\n  database: test            //doris database\n  table: test_tbl           //doris table\n  user: root\n  password: 123456\n  batchSize: 100         //doris sink batch size per streamload\n  intervalMs: 3000      //doris sink the time interval of each streamload\n  maxRetries: 1          //stream load retries\n  streamLoad:              //doris streamload own parameters\n    format: json\n    strip_outer_array: true\n    max_filter_ratio: 1\n")),(0,n.kt)("h4",{id:"write-data-to-doris"},"write data to Doris"),(0,n.kt)(o.Z,{mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"Java",label:"Java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"package org.apache.streampark.test.flink.java.datastream;\n\nimport org.apache.streampark.flink.core.StreamEnvConfig;\nimport org.apache.streampark.flink.core.java.sink.doris.DorisSink;\nimport org.apache.streampark.flink.core.java.source.KafkaSource;\nimport org.apache.streampark.flink.core.scala.StreamingContext;\nimport org.apache.streampark.flink.core.scala.source.KafkaRecord;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.streaming.api.datastream.DataStream;\n\npublic class DorisJavaApp {\n\n    public static void main(String[] args) {\n        StreamEnvConfig envConfig = new StreamEnvConfig(args, null);\n        StreamingContext context = new StreamingContext(envConfig);\n        DataStream<String> source = new KafkaSource<String>(context)\n            .getDataStream()\n            .map((MapFunction<KafkaRecord<String>, String>) KafkaRecord::value)\n            .returns(String.class);\n\n        new DorisSink<String>(context).sink(source);\n\n        context.start();\n    }\n}\n\n")))),(0,n.kt)("admonition",{title:"hint",type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"It is recommended to set batchSize to insert data in batches to improve performance.\nAt the same time, to improve real-time performance, intervalMs is supported for batch writing.\nThe number of streamload retries can be increased by setting maxRetries.")))}d.isMDXComponent=!0}}]);